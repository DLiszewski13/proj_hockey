lgID = col_character(),
tmID = col_character(),
franchID = col_character(),
confID = col_character(),
divID = col_character(),
playoff = col_character(),
OTL = col_double(),
SoW = col_double(),
SoL = col_double(),
name = col_character()
)) %>%
filter(year > 1997)
A <- matrix(
c(alpha * gamma, beta * (1 - alpha), gamma, 0),
nrow = 2, ncol = 2
)
sim <- function(alpha, beta, gamma){
A <- matrix(
c(alpha * gamma, beta * (1 - alpha), gamma, 0),
nrow = 2, ncol = 2
)
A
}
sim(1,1,1)
sim <- function(alpha, beta, gamma){
A <- matrix(
c(alpha * gamma, beta * (1 - alpha), gamma, 0),
nrow = 2, ncol = 2, byrow = TRUE
)
A
}
sim(1,1,1)
d <- c(1,2,3)
d[0]
d[1]
matrix.power
?matrix.power
install.packages("expm")
library(expm)
sim <- function(alpha, beta, gamma, n){
A <- matrix(
c(alpha * gamma, beta * (1 - alpha), gamma, 0),
nrow = 2, ncol = 2, byrow = TRUE
)
ic_plant <- 100
ic_seed <- 0
sol_plant <- vector(mode = "double", length = n+1)
sol_seed <- vector(mode = "double", length = n+1)
sol_plant[1] <- ic_plant
sol_seed[1] <- sol_seed
for(i in 1:n+1){
tmp1 <- c(sol_plant[i],sol_seed[i])
tmp2 <- (A %^% (i+1)) * tmp1
sol_plant[i+1] <- tmp2[1]
sol_seed[i+1] <- tmp2[2]
}
ggplot(sol_plant, mapping = aes(x = 1:n+1, y = sol_plant)) +
geom_point()
}
sim(1,1,1,10)
?ggplot
?plot
sim <- function(alpha, beta, gamma, n){
A <- matrix(
c(alpha * gamma, beta * (1 - alpha), gamma, 0),
nrow = 2, ncol = 2, byrow = TRUE
)
ic_plant <- 100
ic_seed <- 0
sol_plant <- vector(mode = "double", length = n+1)
sol_seed <- vector(mode = "double", length = n+1)
sol_plant[1] <- ic_plant
sol_seed[1] <- sol_seed
for(i in 1:n+1){
tmp1 <- c(sol_plant[i],sol_seed[i])
tmp2 <- (A %^% (i+1)) * tmp1
sol_plant[i+1] <- tmp2[1]
sol_seed[i+1] <- tmp2[2]
}
plot(x = 1:n+1, y =sol_plant)
}
sim(1,1,1,10)
sim <- function(alpha, beta, gamma, n){
A <- matrix(
c(alpha * gamma, beta * (1 - alpha), gamma, 0),
nrow = 2, ncol = 2, byrow = TRUE
)
ic_plant <- 100
ic_seed <- 0
sol_plant <- vector(mode = "double", length = n+1)
sol_seed <- vector(mode = "double", length = n+1)
sol_plant[1] <- ic_plant
sol_seed[1] <- sol_seed
for(i in 1:n){
tmp1 <- c(sol_plant[i],sol_seed[i])
tmp2 <- (A %^% (i+1)) * tmp1
sol_plant[i+1] <- tmp2[1]
sol_seed[i+1] <- tmp2[2]
}
plot(x = 1:n+1, y =sol_plant)
}
sim(1,1,1,10)
sim <- function(alpha, beta, gamma, n){
A <- matrix(
c(alpha * gamma, beta * (1 - alpha), gamma, 0),
nrow = 2, ncol = 2, byrow = TRUE
)
ic_plant <- 100
ic_seed <- 0
sol_plant <- vector(mode = "double", length = n+1)
sol_seed <- vector(mode = "double", length = n+1)
sol_plant[1] <- ic_plant
sol_seed[1] <- ic_seed
for(i in 1:n){
tmp1 <- c(sol_plant[i],sol_seed[i])
tmp2 <- (A %^% (i+1)) * tmp1
sol_plant[i+1] <- tmp2[1]
sol_seed[i+1] <- tmp2[2]
}
plot(x = 1:n+1, y =sol_plant)
}
sim(1,1,1,10)
sim <- function(alpha, beta, gamma, n){
A <- matrix(
c(alpha * gamma, beta * (1 - alpha), gamma, 0),
nrow = 2, ncol = 2, byrow = TRUE
)
ic_plant <- 100
ic_seed <- 0
sol_plant <- vector(mode = "double", length = n+1)
sol_seed <- vector(mode = "double", length = n+1)
sol_plant[1] <- ic_plant
sol_seed[1] <- ic_seed
for(i in 1:n+1){
tmp1 <- c(sol_plant[i],sol_seed[i])
tmp2 <- (A %^% (i+1)) * tmp1
sol_plant[i+1] <- tmp2[1]
sol_seed[i+1] <- tmp2[2]
}
plot(x = 1:n+1, y =sol_plant)
}
sim(1,1,1,10)
sim <- function(alpha, beta, gamma, n){
A <- matrix(
c(alpha * gamma, beta * (1 - alpha), gamma, 0),
nrow = 2, ncol = 2, byrow = TRUE
)
ic_plant <- 100
ic_seed <- 0
sol_plant <- vector(mode = "double", length = n+1)
sol_seed <- vector(mode = "double", length = n+1)
sol_plant[1] <- ic_plant
sol_seed[1] <- ic_seed
for(i in 1:n+1){
tmp1 <- c(sol_plant[i],sol_seed[i])
tmp2 <- (A %^% (i+1)) * tmp1
sol_plant[i+1] <- tmp2[1]
sol_seed[i+1] <- tmp2[2]
}
plot(x = 1:(n+1), y =sol_plant)
}
sim(1,1,1,10)
sim <- function(alpha, beta, gamma, n){
A <- matrix(
c(alpha * gamma, beta * (1 - alpha), gamma, 0),
nrow = 2, ncol = 2, byrow = TRUE
)
ic_plant <- 100
ic_seed <- 0
sol_plant <- vector(mode = "double", length = n+1)
sol_seed <- vector(mode = "double", length = n+1)
sol_plant[1] <- ic_plant
sol_seed[1] <- ic_seed
for(i in 1:n){
tmp1 <- c(sol_plant[i],sol_seed[i])
tmp2 <- (A %^% (i+1)) * tmp1
sol_plant[i+1] <- tmp2[1]
sol_seed[i+1] <- tmp2[2]
}
plot(x = 1:(n+1), y =sol_plant)
}
sim(1,1,1,10)
#
sim(1/2,1/4,1,10)
#
sim(1/2,1/4,2,10)
#
sim(1/2,1/4,1,10)
#
sim(1/2,1/2,1,10)
#
sim(1/2,1/2,2,10)
#
sim(3/4,1/2,1,10)
#
sim(3/4,3/4,1,10)
#
sim(1/4,1/4,2,10)
#
sim(1/3,1/4,2,10)
#
sim(1/3,1/3,2,10)
### postseason series
series_post <- read_csv("data/seriespost.csv") %>%
filter(year > 1997)
### postseason series
series_post <- read_csv("data/seriespost.csv") %>%
filter(year > 1997) %>%
select(-T)
summarise(n(series_post$lgIDWinner != "NHL"))
series_post %>%
filter(series_post$lgIDWinner != "NHL")
### postseason series
series_post <- read_csv("data/seriespost.csv") %>%
filter(year > 1997) %>%
select(-c(T,lgIDWinner,lgIDLoser))
series_post %>%
filter(note != NA)
### postseason series
series_post <- read_csv("data/seriespost.csv") %>%
filter(year > 1997) %>%
select(-c(T,lgIDWinner,lgIDLoser,note))
### loading regular season sata after 1998
teams <- read_csv("data/teams.csv", col_types = cols(
.default = col_double(),
lgID = col_character(),
tmID = col_character(),
franchID = col_character(),
confID = col_character(),
divID = col_character(),
playoff = col_character(),
OTL = col_double(),
SoW = col_double(),
SoL = col_double(),
name = col_character()
)) %>%
filter(year > 1997) %>%
select(-lgID)
teams_post <- read.csv("data/TeamsPost.csv") %>%
filter(year > 1997)
View(teams_post)
teams_post <- read.csv("data/TeamsPost.csv") %>%
filter(year > 1997) %>%
select(-c(T,lgID))
teams_splits <- read_csv("data/TeamSplit.csv")
teams_splits <- read_csv("data/TeamSplits.csv")
teams_splits <- read_csv("data/TeamSplits.csv", col_types = cols(
.default = col_double(),
lgID = col_character(),
tmID = col_character()
))
View(teams_splits)
teams_splits <- read_csv("data/TeamSplits.csv", col_types = cols(
.default = col_double(),
lgID = col_character(),
tmID = col_character()
)) %>%
filter(year > 1997)
team_vs_team <- read_csv("data/TeamVsTeam.csv")
team_vs_team <- read_csv("data/TeamVsTeam.csv", col_types = cols(
.default = col_double(),
lgID = col_character(),
tmID = col_character(),
oppID = col_character(),
))
team_vs_team <- read_csv("data/TeamVsTeam.csv", col_types = cols(
.default = col_double(),
lgID = col_character(),
tmID = col_character(),
oppID = col_character()
))
team_vs_team <- read_csv("data/TeamVsTeam.csv", col_types = cols(
.default = col_double(),
lgID = col_character(),
tmID = col_character(),
oppID = col_character()
)) %>%
filter(year > 1997)
team_vs_team <- read_csv("data/TeamVsTeam.csv", col_types = cols(
.default = col_double(),
lgID = col_character(),
tmID = col_character(),
oppID = col_character()
)) %>%
filter(year > 1997) %>%
select(-lgID)
teams %>%
group_by(year) %>%
summarise(n())
?pnorm
awards_players <- read_csv("data/AwardsPlayers.csv")
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%
select(-lgID)
View(awards_players)
awards_players <- read_csv("data/AwardsPlayers.csv")
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%
filter(year > 1997) %>%
select(-lgID)
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%
filter(year > 1997)
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%
filter(year > 1997) %>%
filter(lgID = !contains(NHL))
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%
filter(year > 1997) %>%
filter(lgID == !contains(NHL))
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%
filter(year > 1997) %>%
filter(lgID == !contains("NHL"))
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%
filter(year > 1997) %>%
filter(lgID == !NHL))
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%
filter(year > 1997) %>%
filter(lgID == !NHL)
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%
filter(year > 1997) %>%
filter(lgID != "NHL")
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%
filter(year > 1997) %>%
select(-lgID)
awards_players <- read_csv("data/AwardsPlayers.csv")  %>%  # parsing error occurs on data for WHA
filter(year > 1997) %>%                                  # players who won playoff mvp, i dont use
select(-lgID)                                            # this data so it is unneccesary
goalies <- read.csv("data/Goalies.csv") %>%
filter(year > 1997) %>%
select(-lgID)
View(goalies)
goalies <- read_csv("data/Goalies.csv") %>%
filter(year > 1997) %>%
select(-lgID)
goalies <- read.csv("data/Goalies.csv") %>%
filter(year > 1997) %>%
select(-lgID)
players <- read_csv("data/Scoring") %>%
filter(year > 1997)
players <- read_csv("data/Scoring.csv") %>%
filter(year > 1997)
View(players)
players <- read_csv("data/Scoring.csv") %>%
filter(year > 1997) %>%
select(-lgID)
13*16
teams %>%
filter(tmID == ATL)
filter(tmID == "ATL")
teams %>% filter(tmID == "ATL")
?group_by
teams %>%
select(c(tmID,franchID,name)) %>%
filter(unique(tmID))
teams %>%
select(c(tmID,franchID,name)) %>%
filter(tmID == unique(tmID))
unique(teams$tmID)
length(unique(teams$tmID))
teams %>% group_by(tmID)
teams %>%
group_by(tmID) %>%
select(c(tmID,franchID,name))
teams %>%
group_by(tmID) %>%
select(c(tmID,franchID,name)) %>%
distinct(tmID)
?distinct
teams %>%
group_by(tmID) %>%
select(c(tmID,franchID,name)) %>%
distinct(tmID, .keep_all = TRUE)
team_reference <- teams %>%
group_by(tmID) %>%
select(c(tmID,franchID,name)) %>%
distinct(tmID, .keep_all = TRUE)
### loading regular season data after 1998
teams <- read_csv("data/teams.csv", col_types = cols(
.default = col_double(),
lgID = col_character(),
tmID = col_character(),
franchID = col_character(),
confID = col_character(),
divID = col_character(),
playoff = col_character(),
OTL = col_double(),
SoW = col_double(),
SoL = col_double(),
name = col_character()
)) %>%
filter(year > 1997) %>%
# removing lgID col (only one league exists during 1998 - 2011)
select(-lgID) %>%
# removing franchID and name columns, now stored in team_reference with tmID as the key
select(-c(franchID, name))
CQF_playoff_success <- teams %>%
filter(!is.na(playoff))
CQF_playoff_success
CQF_playoff_success <- teams %>%
filter(!is.na(playoff)) %>%
select(c(year,tmID,confID,divID, rank, playoff, Pts))
CQF_playoff_success
?aod
CQF_series_post <- series_post %>%
filter(round == "CQF")
CQF_series_post
?left_join
teams_tmp <- teams %>%
mutate(playoff_binary <- !is.na(playoff))
View(teams_tmp)
?mutate
teams_tmp <- teams %>%
mutate(playoff_binary = !is.na(playoff))
as.integer(teams_tmp$playoff_binary)
teams_tmp
teams_tmp$playoff_binary <- as.integer(teams_tmp$playoff_binary)
teams_tmp
teams_tmp %>% ggplot(mapping = aes(Pts,playoff_binary)) +
geom_point() +
geom_smooth(method = "glm")
?geom_smooth
teams_tmp %>% ggplot(mapping = aes(Pts,playoff_binary)) +
geom_point() +
geom_smooth(method = "glm",method.args=list(family="binomial"), se=FALSE)
?geom_point
teams_tmp %>% ggplot(mapping = aes(Pts,playoff_binary)) +
geom_point(aes(alpha = 0.2)) +
geom_smooth(method = "glm",method.args=list(family="binomial"), se=FALSE)
teams_tmp %>% ggplot(mapping = aes(Pts,playoff_binary)) +
geom_point(aes(alpha = 0.1)) +
geom_smooth(method = "glm",method.args=list(family="binomial"), se=FALSE)
teams_tmp %>% ggplot(mapping = aes(Pts,playoff_binary)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"), se=FALSE)
CQF_playoff_success
CQF_series_post
CQF_tmp <- left_join(CQF_playoff_success, CQF_series_post, by = c("year", "tmID" = "tmIDWinner"))
CQF_tmp
?ifelse
CQF_playoff_success <- teams %>%
filter(!is.na(playoff)) %>%
select(c(year,tmID,confID,divID, rank, playoff, Pts)) %>%
mutate(CQFWinner <- ifelse(playoff == "CQF", 0, 1))
CQF_playoff_success
CQF_playoff_success <- teams %>%
filter(!is.na(playoff)) %>%
select(c(year,tmID,confID,divID, rank, playoff, Pts)) %>%
mutate(CQFWinner = ifelse(playoff == "CQF", 0, 1))
CQF_playoff_success
CQF_playoff_success %>% ggplot(aes(Pts, CQFWinner)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"), se=FALSE)
?xlim
CQF_playoff_success %>% ggplot(aes(Pts, CQFWinner)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"), se=FALSE) +
xlim(min(CQF_playoff_success$Pts)-5, max(CQF_playoff_success$Pts)+5)
CQF_playoff_success %>% ggplot(aes(Pts, CQFWinner)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"), se=FALSE) +
scale_x_continuous(min(CQF_playoff_success$Pts)-5, max(CQF_playoff_success$Pts)+5)
CQF_playoff_success %>% ggplot(aes(Pts, CQFWinner)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"), se=FALSE)
?jitter
# plotting logistic regression: CQFWinner vs Pts
CQF_playoff_success %>% ggplot(aes(Pts, CQFWinner)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"))
teams_tmp %>% ggplot(mapping = aes(Pts,playoff_binary)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"))
# plotting logistic regression: CQFWinner vs Pts
CQF_playoff_success %>% ggplot(aes(Pts, CQFWinner)) +
geom_jitter(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"))
# plotting logistic regression: CQFWinner vs Pts
CQF_playoff_success %>% ggplot(aes(Pts, CQFWinner)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"))
View(CQF_tmp)
rm(CQF_tmp)
?sample
# dataset for CSF teams and result
CSF_playoff_success <- teams %>%
filter(playoff == ("CSF" || "CF" || "F" || "SC"))
?filter
# dataset for CSF teams and result
CSF_playoff_success <- teams %>%
filter(!is.na(playoff)) %>%
filter(playoff != "CQF")
# dataset for CSF teams and result
CSF_playoff_success <- teams %>%
filter(!is.na(playoff)) %>%
filter(playoff != "CQF") %>%
mutate(CSFWinner = ifelse(playoff == "CSF", 0, 1))
View(CSF_playoff_success)
CSF_playoff_success %>% ggplot(aes(Pts, CSFWinner)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"))
# plotting logistic regression: CQFWinner vs Pts
CQF_playoff_success %>% ggplot(aes(Pts, CQFWinner)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"))
CSF_playoff_success %>% ggplot(aes(Pts, CSFWinner)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"))
CF_playoff_success <- teams %>%
filter(!is.na(playoff)) %>%
filter(playoff != "CQF") %>%
filter(playoff != "CSF") %>%
mutate(CFWinner = ifelse(playoff == "CF", 0, 1))
CF_playoff_success %>% ggplot(aes(Pts, CFWinner)) +
geom_point(aes(alpha = 0.01)) +
geom_smooth(method = "glm",method.args=list(family="binomial"))
